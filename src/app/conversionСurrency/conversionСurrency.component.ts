import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';import { FormBuilder, FormGroup } from '@angular/forms';import { Store } from "@ngrx/store";import { map, Observable, Subject, takeUntil, } from 'rxjs';import { selectFirstCount, selectRate, selectSecondCount } from "../store/selectors";import {  setConvertibleCurrencyAction, setConvertibleCurrencyCountAction,  setCurrencyToBeConvertedAction, setCurrencyToBeConvertedCountAction} from "../store/actions/getRate.actions";import { CURRENCY_CONFIG } from './CurrencyConfig';@Component({  selector: "app-conversion",  templateUrl: './conversionСurrency.component.html',  styleUrls: ['./conversionСurrency.component.css'],  changeDetection: ChangeDetectionStrategy.OnPush})export class ConversionUrrencyComponent implements OnInit, OnDestroy {  public readonly configs = CURRENCY_CONFIG;  public form!: FormGroup;  public currency$: Observable<string[]>  public isLoading$: Observable<boolean>  private destroy$ = new Subject()  constructor(    private readonly formBuilder: FormBuilder,    private store: Store  ) {}  ngOnInit(): void {    this.getCurrencyList();    this.initializeForm();    this.handleFormChanges();    this.getConvertValue();  }  private initializeForm(): void {    this.form = this.formBuilder.group({      inputControlFirst: [],      selectControlFirst: ['UAN'],      inputControlLast: [],      selectControlLast: ['USD']    })  }  private getCurrencyList(): void {    this.currency$ = this.store.select(selectRate)      .pipe(        map((rateList) => rateList.map((currencys) => currencys.cc))      )  }  private getConvertValue(): void {    this.store.select(selectFirstCount)      .pipe(takeUntil(this.destroy$))      .subscribe((value) => {        this.form.get("inputControlFirst").patchValue(value, { emitEvent: false, onlySelf: true });      })    this.store.select(selectSecondCount)      .pipe(takeUntil(this.destroy$))      .subscribe((value) => {        this.form.get("inputControlLast").patchValue(value, { emitEvent: false, onlySelf: true });      })  }  private handleFormChanges() {    this.form.get("inputControlFirst").valueChanges      .pipe(takeUntil(this.destroy$))      .subscribe((countFirst) => this.store.dispatch(setConvertibleCurrencyCountAction({ countFirst })))    this.form.get("selectControlFirst").valueChanges      .pipe(takeUntil(this.destroy$))      .subscribe((convertibleCurrency) => this.store.dispatch(setConvertibleCurrencyAction({ convertibleCurrency })))    this.form.get("inputControlLast").valueChanges      .pipe(takeUntil(this.destroy$))      .subscribe((countSecond) => this.store.dispatch(setCurrencyToBeConvertedCountAction({ countSecond })))    this.form.get("selectControlLast").valueChanges      .pipe(takeUntil(this.destroy$))      .subscribe((currencyToBeConverted) => this.store.dispatch(setCurrencyToBeConvertedAction({ currencyToBeConverted })))  }  ngOnDestroy() {    this.destroy$.next(true)    this.destroy$.complete()  }}